**Selenium Webdriver
-What is webdriver?
-It is one of component in selenium
-Webdriver is module.It is available in selenium package
-Webdriver is API (Application Programming Interface)

**Architecture of WebDriver
Selenium 3:
-Selenium Language Binding->JSON Wire Protocol->Browser drivers->W3C->Browsers
Selenium 4:
-Selenium Language Bindings->W3C->Browser drivers->W3C->Browsers

*Test Sites for Testing
-https://opensource-demo.orangehrmlive.com/web/index.php/auth/login
-https://admin-demo.nopcommerce.com/login

**Browser invoking:
-In Selenium 4 instead of directly passing chromedriver path, we need to import Service class from chrome package
-Then we need to create object of Service class and pass chromedriver path
-If we don't want to specify driver path in our script then copy required drivers and paste it in python installation folder (C:\Users\Admin\AppData\Local\Programs\Python\Python312\Scripts)

**Locators:
1.id
2.name
3.linktext
4.partiallinktext
5.classname
6.Tagname
7.CSSselector
-We have 4 different types of css selector combination as:
a.tag id
b.tag class
c.tag attribute
d.tag class attribute
-Here the tag is optional
8.Xpath-Absolute Xpath & Relative Xpath
-XPath is defined as XML Path
-It is a syntax or language for finding any element on the webpage using XML path expression
-XPath is used to find the location of any element on a webpage using HTML DOM(Document Object Model) Structure
-XPath can be used to navigate through elements and attributes in DOM
-XPath is an address of the element

**Difference Between Absolute and Relative XPath
1.Absolute Xpath starts from root html node & Relative Xpath directly jump to element on DOM
2.Absolute Xpath starts with '/' and Relative Xpath starts with '//'
3.In Absolute Xpath we use only tags/nodes & In Relative Xpath we use attributes

**Syntax of writing Xpath
- //tagname[@attribute='value']

**Methods and Operators in Xpath
1.and operator:
-syntax: //tagname[@attribute='value' and @anotherattribute='value']

2.or operator:
-syntax: //tagname[@attribute='value' or @anotherattribute='value']

3.contains() method:
-syntax: //tagname[contains(@attribute,'value')]

4.starts-with() method:
-syntax: //tagname[starts-with(@attribute,'value')]

5.ends-with() method:
-syntax: //tagname[ends-with(@attribute,'value')]

6.text() method:
-syntax: //tagname[text()='value']

**Xpath Axes
-By using Xpath Axes we can traverse through DOM Top to bottom or Bottom to top
1.self
-Each node itself is considered as self or self node
2.parent
-Node above the self node is called as parent node/element
-Traverse parent element of the current html tag
-syntax: //*[@attribute='value']/parent::tagname
3.child
-Node below the self node is called as child node/element
-Traverse all child element of the current html tag
-syntax: //*[@attribute='value']/child::tagname
4.ancestor
-Node above parent node is called as ancestor node/element
-Traverse all the ancestor elements(grandparents,parent etc) of the current html tag
-syntax: //*[@attribute='value']/ancestor::tagname
5.descendant
-Node below child node of  is called as descendant
-Traverse all descendant element(child node,grandchild node etc) of the current html tag
-syntax: //*[@attribute='value']/descendant::tagname
6.following
-Elements parallel & below to self node is called as following nodes
-Traverse all element that comes after the current tag
-syntax: //*[@attribute='value']/following::tagname
7.following-sibling
-Nodes comes under following and which parallel/equivalent nodes to self node is called as following-sibling
-Traverse from current html tag to next sibling html tag
-syntax: //current html tag[@attribute='value']/following-sibling::sibling tag[@attribute='value']
8.preceding
-Elements parallel & above to self node is called as following nodes
-Traverse all nodes that comes before the current html tag
-syntax: //*[@attribute='value']/preceding::tagname
9.preceding-sibling
-Nodes comes under preceding and which parallel/equivalent nodes to self node is called as preceding-sibling
-Traverse from current html tag to previous sibling html tag
-syntax: //current html tag[@attribute='value']/preceding-sibling::previous tag[@attribute='value']

*Xpath of SVG Element:
-syntax: //*[local-name()='svg']

*Xpath of elements having more spaces in text value
-syntax: //tagname[normalize-space()='text value']

**Selenium basic commands:
1.Application commands
get-launching application URL
title-to capture the title of the current webpage
current_url-to capture current url of the webpage
page_source-to capture source code of the page
2.conditional commands
is_displayed()
is_enabled()
is_selected()
3.browser commands
close()-close single browser window which has driver focus
quit()-close multiple browser windows (all opened browser window).Internally killing driver/browser process
4.navigational commands
back()
forward()
refresh()
5.wait commands
*time.sleep():
-Accepts time in seconds
-It is python wait not selenium
-It will reduce the performance of script as it pauses execution of code
-If element is not available withing given wait time then it will throw exception
*implicit wait
-It is selenium wait
-If we write implicit wait after driver object initialization then it will be applicable for all elements
-It will not impact performance as if element is available before wait time it will proceed with further execution
-If element is not available withing given wait time then it will throw exception, this can be overcome by using
try cath block to avoid stopping of further code execution
*explicit wait
-It is selenium wait
-Explicit wait works based on condition
-We can handle exceptions with this wait
-To use this wait we need to declare webdriver wait and then implement explicit wait
-For different element we need to use multiple times
-We can use poll_frequency to check element after specific time of frequency
-Find element method is not necessary to use this wait, we can directly pass locator with condition
** Difference between find_element() & find_elements():
1.find_element() returns single webelement
2.If we pass locator which points to multiple elements, find_element() will always returns first webelement
3.If we pass wrong locator which does not locate any element on webpage this method will throw NoSuchElement Exception
4.find_elements() returns list of webelement
5.find_elements() will not throw any exception if locator is not matched, it will return empty list

** Difference between text and get_attribute():
1.text --> returns inner text of the element if available otherwise it will not return anything
2.get_attribute() --> Will return attribute value of the element

**Links
1.Internal Link
2.External Link
3.Broken Link

**Alerts:
-To handle alerts, capture alert window using driver.switch_to.alert
-There are text, accept(), dismiss() methods to handle elements on Alert

** Authentication Pop Up
-To handle Authentication pop up , pass username and url along with url(inject username and password with url)
-Syntax: https://username:password@test.com

**Frames/iframe
-Selenium 3- switch_to_frame()
-Selenium 4- switch_to.frame(name of the frame/id of the frame/webelement/index of frame)

**Browser Windows
-switch_to.window(Browser Window ID)
-current_window_handle --Return windowId of single browser window
-current_window_handles --Returns window id's of multiple browser windows

** Mouse Operations
-class - ActionChains
-Operations:
1) Mouse hover - move_to_element(element)
2) Right click - context_click(element)
3) Double click - double_click(element)
4) Drag and drop - drag_and_drop(source,target)
